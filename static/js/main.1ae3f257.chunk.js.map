{"version":3,"sources":["common/FormControls/FormsControls.jsx","components/Posts/PostEditor.jsx","components/Posts/Posts.jsx","components/Posts/PostCreator.jsx","redux/reducer/PostsReducer.js","components/Posts/PostsContainer.jsx","redux/store/Redux-Store.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","input","meta","touched","error","props","visualError","className","required","Input","FormField","component","type","placeholder","name","validate","id","Field","PostEditorReduxForm","reduxForm","form","onSubmit","handleSubmit","Posts","useState","editMode","setEditMode","currentPostValue","setCurrentPostValue","initialFormValue","setinitialFormValue","postForDelete","setPostForDelete","useEffect","onEditorSubmit","formData","postEditor","posts","map","n","_id","initialValues","key","src","postImage","alt","postHeader","postBody","moment","createdAt","locale","format","onClick","console","log","index","indexOf","filter","item","checkboxToggler","deletePost","length","image","header","body","PostCreatorReduxForm","disabled","pristine","initialState","PostsReducer","state","action","p","editedPost","includes","connect","addPostBody","dispatch","setPosts","reset","deletePostActionCreator","editPost","obj","a","Date","now","Math","random","toString","substring","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ae3f257.chunk.js","sourcesContent":["/* eslint-disable no-useless-concat */\nimport React from 'react';\nimport { Field } from 'redux-form';\nexport const TextArea = ({ input, meta: { touched, error }, ...props }) => {\n    const visualError = touched && error\n\n    return (\n        <div className={\"FormControl\" + \" \" + (visualError ? \"error\" : \"\")}>\n            <div>\n                <textarea required {...input} {...props} />\n            </div>\n            {visualError && <span>{error}</span>}\n        </div>\n    );\n}\nexport const Input = ({ input, meta: { touched, error }, ...props }) => {\n    const visualError = touched && error\n\n    return (\n        <div className={\"FormControl\" + \" \" + (visualError ? \"error\" : \"\")}>\n            <div>\n                <input {...input} {...props} />\n            </div>\n            {visualError && <span>{error}</span>}\n\n        </div>\n    );\n}\n\nexport const FormField = (component, type, placeholder, name, validate, id) => {\n    return <Field component={component} type={type} placeholder={placeholder}\n        name={name}  validate={validate}\n        {...id}\n    />\n}","import React from 'react';\nimport { FormField, Input, TextArea } from '../../common/FormControls/FormsControls';\nimport { reduxForm } from 'redux-form';\n\nconst PostEditor = (props) => {\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                < div className='postContainer'>\n                    <div className='postImg'>\n                        <h3>Зображення:</h3>\n                        {FormField(Input, null, 'Put Image URL', 'postImage')}\n                    </div>\n                    <div>\n                        <h2>Заголовок:</h2>\n                        {FormField(Input, null, 'Text', 'postHeader',)}\n                    </div>\n                    <div>\n                        <h3>Новина:</h3>\n                        {FormField(TextArea, null, 'Text', 'postBody')}\n                    </div>\n                    <button>Відредагувати</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst PostEditorReduxForm = reduxForm({ form: `postEditor` })(PostEditor)\n\nexport default PostEditorReduxForm;","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport 'moment/locale/uk';\nimport PostEditorReduxFormState from './PostEditor';\n\nconst Posts = (props) => {\n    const [editMode, setEditMode] = useState();\n    const [currentPostValue, setCurrentPostValue] = useState();\n    const [initialFormValue, setinitialFormValue] = useState(currentPostValue);\n    const [postForDelete, setPostForDelete] = useState([]);\n    useEffect(() => {\n        setinitialFormValue(currentPostValue)\n    },\n        [currentPostValue])\n\n    const onEditorSubmit = (formData) => {\n        props.postEditor(formData)\n        setEditMode(false)\n        setCurrentPostValue(null)\n    }\n    const initialValueForEditForm = (id, image, header, body) => {\n        setCurrentPostValue(\n            {\n                _id: id,\n                postImage: image,\n                postBody: body,\n                postHeader: header\n            }\n        )\n    }\n    const checkboxToggler = (id) => {\n        console.log(postForDelete)\n        const index = postForDelete.indexOf(id)\n        if (index > -1) {\n            setPostForDelete(postForDelete.filter((item) => item !== id))\n        } else {\n            setPostForDelete([...postForDelete, id])\n        }\n    }\n    \nreturn (\n    <>\n        { props.posts.map(n => editMode === n._id\n            ? <PostEditorReduxFormState id={n.id} onSubmit={onEditorSubmit} initialValues={initialFormValue} />\n            : < div className='postContainer' key={n._id + 1} >\n                <div>\n                    <div className='postImg'>\n                        <img className='postImg' src={n.postImage} alt=\"postImg\" />\n                    </div>\n                    <h2>{n.postHeader}</h2>\n                    <div className='postText'>{n.postBody}\n                    </div>\n                    <div>\n                        Створено: {moment(n.createdAt).locale('uk').format('LLL')}\n                        {/* Created time */}\n                    </div>\n                    <div>\n                        <input type=\"checkbox\" onClick={() => checkboxToggler(n._id)} ></input>\n                        <button onClick={() => props.deletePost(postForDelete.length > 0 ? postForDelete : [n._id], setPostForDelete([]))}>Delete Post</button>\n                        <button onClick={() => initialValueForEditForm(n._id, n.postImage,\n                            n.postHeader, n.postBody, setEditMode(n._id))}>Edit Mode</button>\n                    </div>\n\n                </div>\n            </div >\n        )}\n    </>\n)\n}\nexport default Posts;","import React from 'react';\nimport { FormField, Input, TextArea } from '../../common/FormControls/FormsControls';\nimport { reduxForm } from 'redux-form';\n\nconst PostCreator = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            < div className='postContainer'  >\n                <div className='postImg'>\n                    <h3>Зображення:</h3>\n                    {FormField(Input, null, 'Put Image URL', 'postImage')}\n                </div>\n                <div>\n                    <h2>Заголовок:</h2>\n                    {FormField(Input, null, 'Text', 'postHeader')}\n                </div>\n                <div>\n                    <h3>Новина:</h3>\n                    {FormField(TextArea, null, 'Text', 'postBody')}\n                </div>\n                <button type=\"submit\" disabled={props.pristine}>Відправити</button>\n            </div>\n        </form>\n    )\n}\n\nconst PostCreatorReduxForm = reduxForm({ form: 'postCreator' })(PostCreator)\n\nexport default PostCreatorReduxForm;","import { reset } from 'redux-form';\n\nconst SET_POST = 'SET_POST';\nconst SET_EDITED_POST = 'SET_EDITED_POST';\nconst DELETE_POST = 'DELETE_POST';\nlet initialState = {\n\n    posts:\n        [\n            {\n                _id: \"1\",\n                postImage: 'https://www.10mest.com/photos/france-paris-eiffel-tower-and-trocadero-gardens-600x338.jpg',\n                postHeader: 'Париж',\n                postBody: 'Місто Париж (Франція) Париж (фр. Paris) — столиця та найбільше місто Франції, розташоване в північній частині країни на берегах річки Сени в центрі регіону Іль-де-Франс.',\n                createdAt: 1600885849752\n            },\n            {\n                _id: \"2\",\n                postImage: 'https://horosho-tam.ru/thumb/1600/pics/8e/e5/59a32de41f22d336a02de58e/sobor-svyatoy-sofii-stambul-turtsiya.jpg',\n                postHeader: 'Туреччина',\n                postBody: 'Назва «Туреччина» (тур. Türkiye), що застосовується до сучасної республіки Туреччина, походить від старофранцузького Turquie, яке, в свою чергу, походить від середньовічних латинських форм Turchia, Turquia і грец. Τουρκία. Османська імперія, що існувала в 1299-1922 роках, серед її сучасників також зазвичай називалася Туреччиною або Османською імперією.',\n                createdAt: 1600885849752\n            },\n            {\n                _id: \"3\",\n                postImage: 'https://www.tourtrans.ru/images/countries/ssha/nyu-york/shutterstock_118357066.jpg',\n                postHeader: 'Нью-Йорк',\n                postBody: 'Нью-Йо́рк (англ. New York City, МФА: [nuːˈjɔɹk] ( прослухати) або The City of New York, дослівно — «Новий Йорк») — найбільше місто у США[9], розташоване на Атлантичному узбережжі біля гирла річки Гудзон. Населення — 8 175 133 особи (2010[1]), міської агломерації — 19 млн.',\n                createdAt: 1600885849752\n            }\n        ]\n}\n\nconst PostsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_POST:\n            return {\n                ...state,\n                posts: [...state.posts, action.posts]\n            }\n        case SET_EDITED_POST:\n            debugger\n            return {\n                ...state,\n                posts: state.posts.map(p => {\n                    if (p._id === action.editedPost._id) {\n                        return action.editedPost\n                    }\n                    return p\n                })\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(item => !action.id.includes(item._id))             \n                //  item._id !== action.id)\n            }\n        default:\n            return state\n    }\n}\n//action creator\nexport const setPosts = (posts) => ({ type: SET_POST, posts })\nexport const setEditedPost = (editedPost) => ({ type: SET_EDITED_POST, editedPost })\nexport const deletePostActionCreator = (id) => ({ type: DELETE_POST, id })\n//thunk dispatch\nexport const addPostBody = (posts) => (dispatch) => {\n    dispatch(setPosts(posts))\n    dispatch(reset('postCreator'))\n}\nexport const deletePost = (id) => (dispatch) => {\n    dispatch(deletePostActionCreator(id))\n}\nexport const editPost = (obj) => async (dispatch) => {\n    dispatch(setEditedPost(obj));\n}\n\nexport default PostsReducer;\n","import React from 'react';\nimport Posts from './Posts';\nimport PostCreatorReduxForm from \"./PostCreator\";\nimport { connect } from 'react-redux';\nimport { addPostBody, deletePost, editPost } from '../../redux/reducer/PostsReducer';\n\nconst NewPostContainer =(props) => {\n\n        const postEditor = (obj) => {\n            props.editPost(obj)\n        }\n        const onSubmit = (formData) => {\n            formData.createdAt = Date.now()\n            formData._id =  Math.random().toString(36).substring(7)\n           \n            props.addPostBody(formData)\n        }\n        const deletePost = (id) => {\n            debugger\n            props.deletePost(id)\n            \n        }\n        return (\n            <div>\n                <Posts posts={props.posts}\n                    deletePost={deletePost}\n                    postEditor={postEditor}\n                />\n                <PostCreatorReduxForm posts={props.posts} onSubmit={onSubmit}\n                />\n            </div>\n        )\n    }\n    \nconst mapStateToProps = (state) => ({\n    posts: state.posts.posts\n})\n\nexport default connect(mapStateToProps, { addPostBody, deletePost, editPost })(NewPostContainer)","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport PostsReducer from '../reducer/PostsReducer';\nimport { reducer as formReducer } from 'redux-form'\n\nconst reducers = combineReducers({\n    posts: PostsReducer,\n    form: formReducer\n});\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport PostContainer from './components/Posts/PostsContainer'\nimport store from './redux/store/Redux-Store'\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n          <PostContainer/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}